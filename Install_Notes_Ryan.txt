
This file contains install and running notes for MOM6.

Ryan Holmes

24-5-2016 ------------------------------------------------------------
To fork and rewrite MOM6 code for contributing to GFDL, use the
following process:
Fork both MOM6-examples and MOM6 github GFDL-NOAA repositories on
github.
In Simulations/MOM6 clone my MOM6-examples fork:
git clone git@github.com:rmholmes/MOM6-examples.git ./
If I want to edit MOM6 code, then at this point change the .gitmodules
file to have the MOM6 code point to rmholmes/MOM6
Then get the submodules that I want:
git submodule init
git submodule update src/FMS
git submodule update --init --recursive src/MOM6
git submodule update tools/matlab/gtools
git submodule update src/mkmf

30-5-2016 ------------------------------------------------------------
For a simple setup just to play locally, used the following process:
MOM6 was cloned into Simulations/MOM6 using the following commands:

mkdir MOM6
cd MOM6
git clone git@github.com:rmholmes/MOM6-examples.git ./
git submodule init
git submodule update src/FMS
git submodule update --init --recursive src/MOM6
git submodule update src/mkmf

switched to a new branch to keep changes nice (including this file).

In order to get the following steps to work, needed to change "nc-config"
to "nf-config" in the linux template file at src/mkmf/templates/linux-gnu.mk
(3 cases) (like ROMS).

Then followed instructions at
https://github.com/NOAA-GFDL/MOM6-examples/wiki/Ubuntu-compiler-environment#ubuntu-platform-notes
:
        installed packaged csh
        mkdir -p build/gnu
        echo > build/gnu/env
        mkdir -p build/gnu/shared/repro/

1 cmd:  (cd build/gnu/shared/repro/; rm -f path_names; \
        ../../../../src/mkmf/bin/list_paths ../../../../src/FMS; \
        ../../../../src/mkmf/bin/mkmf -t ../../../../src/mkmf/templates/linux-gnu.mk -p libfms.a -c "-Duse_libMPI -Duse_netCDF -DSPMD" path_names)

1 cmd:  (cd build/gnu/shared/repro/; source ../../env; make NETCDF=3 REPRO=1 FC=mpif90 CC=mpicc libfms.a -j)

        mkdir -p build/gnu/ocean_only/repro/
1 cmd:  (cd build/gnu/ocean_only/repro/; rm -f path_names; \
        ../../../../src/mkmf/bin/list_paths ./ ../../../../src/MOM6/{config_src/dynamic,config_src/solo_driver,src/{*,*/*}}/ ; \
        ../../../../src/mkmf/bin/mkmf -t ../../../../src/mkmf/templates/linux-gnu.mk -o '-I../../shared/repro' -p 'MOM6 -L../../shared/repro -lfms' -c "-Duse_libMPI -Duse_netCDF -DSPMD" path_names)

1 cmd:  (cd build/gnu/ocean_only/repro/; source ../../env; make NETCDF=3 REPRO=1 FC=mpif90 LD=mpif90 MOM6 -j)

        cd ocean_only/double_gyre/
        mkdir RESTART
        ../../build/gnu/ocean_only/repro/MOM6

31-05-2016  ----------------------------------------------------------
installed MIDAS python tools using
git submodule update tools/python/MIDAS
cd tools/python/MIDAS
source activate python2
make

However, I didn't really need this. The tools/analysis section has
tools for reconstructing z-coord plots from the layered coordinate
runs. See example ipython notebook in the flow_downslope example. This
has been slightly altered to make an example movie.


15-06-2016 -----------------------------------------------------------
Started working on setting the buoyancy flux. The bouyancy
flux/entrainment of layers appears to occur at lines 660-691 in
MOM6/src/parameterizations/vertical/MOM_diabatic_driver.F90 When not
using the ALE algorithm, calls function Entrainment_diffusive to
calculate entrainment. This function is contained in
MOM_entrain_diffusive.F90 and reproduces that described in Hallberg,
MWR (2000)
This file was stripped of mixed-layer and correct_density code and
saved into *_ryan_play. The code that determines ea and eb from F is
in the F_to_ent subroutine. I want to change the input to this
subroutine. However, there are many restrictions to F that need to be
taken into account in making these choices.

Coordinate choices: layer = classical layer model where density is
uniform within layer. rho = ALE representation of a continous
stratification. z* = ALE representation of z*. sigma = ALE
representation of sigma.

20-06-2016 -----------------------------------------------------------
Working on setup of abyssal mixing case, without buoyancy flux set for
now. Options that I need to set:
MOM_input:
        - use linear EOF with DRHO_DT = 0.0, DRHO_DS = 0.0 or
          equivalent.
        - GFS set at 0.98???
        - TOPO_CONFIG -> Need to change this for my topography.
        - MINIMUM_DEPTH/MASKING_DEPTH -> Need to change this to allow
          surface fluxes?
        - THICKNESS_CONFIG -> Set this for initial conditions.
        - TS_CONFIG -> Same as above.
        - Horizontal viscosity: Laplacian 1e4.
        - Vertical: 1e-4
        - HBBL: 10.0 -> 10m bottom boundary layer?
        - KHTH: 1e-4 -> Background horizontal thickness diffusion.
        - KPP, CONVECTION?
        - CORRECT_DENSITY = False
        - BUOY_CONFIG -> Set bouyancy surface forcing?
        - DOME2D options in MOM_parameter_doc.all -> set shelf width
          etc. 
        - USER_CHANGE_DIFFUSIVITY

First thing done: Removed shelf using DOME2D settings in
MOM_input. Added a constant diffusivity in the interior of
1m2s-1. This gives rise to a nice diapycnal circulation due to the
sloped topography and the top and bottom boundary conditions. Saved in
ConstantKappa_NoForcing.gif movie.

Can output diapycnal velocity but in order to output actual vertical
velocity must diagnose from umo and vmo (github requested feature?).

Surface forcing:
Can use: BUOY_CONFIG = "linear",
RESTORE_BUOY = True,
FLUXCONST = 0.5, (m day-1)
SSS_NORTH = ?
SSS_SOUTH = ?
But needs to be oriented North-South! Which means I need to change the
DOME2D topography setup? Try to do this first. Reproduce
flow_downslope rotated. Then add surface forcing.

To do this: First changes all MOM_input fields X to Y. Then need to
change both src/MOM6/src/user/DOME2d_initialization and
src/MOM6/src/initialization/MOM_state_initialization.
src/MOM6/src/initialization/MOM_fixed_initialization.

21-06-2016 -----------------------------------------------------------

Managed to successfully run flow-downslope layer and constant kappa
y-oriented. Only strange thing is plotting which seems to want to go
to 900km as opposed to 800km?

Problem: With ENABLE_THERMODYNAMICS can't use fluxes%buoy, must use
bulk mixed layer or a lprecip, sw, evap or sens flux. Thus can't use
linear restoring (unless with bulk mixed layer). Without
ENABLE_THERMODYNAMICS the linear buoyancy restoring is not written
yet.

One option: use ENABLE_THERMODYNAMICS = False, change everything to
density not salinity, then write the linear restoring for that
(should be easy?). In fact, turning off ENABLE_THERMODYNAMICS works
perfectly for this in the layer case.

Density restoring: uses GV%Rlay, layer densities. These are set in
MOM_coord_initialization.F90, set to LIGHTEST_DENSITY in surface layer
surface and DENSITY_RANGE heavier at bottom. By default this is
1035.0. The sfc_density parameter is then derived in file
src/core/MOM.F90 to be equal to the average density over the upper
HMIX_SFC_PROP (when not using bulk mixed layer). 

Successfully included linear density restoring by adding code in
MOM_surface_forcing.F90. This uses a north and south density D_NORTH
and D_SOUTH to restore linearly with FLUXCONST rate.  Problem is that
this is only a linear profile and I don't think this gives me what I
want. Example saved as Dens_Linear.gif

Next try: Restore fast to densist buoyancy just on shelf, elsewhere
restore to starting buoyancy. Should create a continous plume?

Clarification: LIGHTEST_DENSITY is the density at the surface, so the
density of the top layer will be more than this. For my setup it is
1035.0125, because I have 40 layers, a top-bottom difference of 1.0
and thus a half layer difference of 1/40/2 = 0.0125.

Succesfully finished just restoring on the shelf. However, this still
doesn't work that well because of problems resolving the pressure
gradient on the shelf when it's all one cell? Leads to lots of fast
waves. Increased horizontal viscosity to damp these, and removed
initial salty water on shelf. Result is in Dens_Shelf_Forcing.gif
movie and in this commit.

22-06-2016 -----------------------------------------------------------

Note: Found a bug, in all of above the buoyancy forcing was time
independent because VARIABLE_BUOYFORCE = False, so was set to initial
value. Hence the forcing cases have been rerun:
1) ConstantKappa_Forcing.gif - Constant Kappa, but surface restoring to
original surface density everywhere
2) LinearRestoring.gif - No kappa, linear restoring at surface with no
shelf.
3) ShelfRestoring.gif - No kappa, Shelf restoring with default
shelf. No low initial low salinity.
5) SlopeRestoring.gif - Restoring above slope 

Unresolved question: Why does the bottom slope not extend all the way
to the domain edge for WIDTH=0, DEPTH=0???

I don't think surface forcing can give us what we want for several
reasons:
1) We want a plume with the bottom density. However, setting this
means there is only one vertical coodinate grid point in the plume and
so it's hard to get it off the shelf nicely. With a gradient in
forcing we generate a plume with a range of densities.
2) The time step required to resolve the downslope plume is much
shorter than needed to resolve the diffusive processes. It's too
expensive?
3) With mixing included the plume will mix out and put flux into
intermediate layers, unless we restrict mixing to away from the plume
slope.

Alternative is to put a volume source in at the bottom...

Other interesting discoveries:
     1) KV - vertical viscosity, use this to control waves
     2) DT_FORCING - If set, limits DT
     3) ENERGYSAVEDAYS - sets log output frequency

These parameters and others have been changed. Many superflous options
in MOM_input removed. Changed Bflux to not do over shelf but over slope
in a specified fraction of domain. A fast FLUXCONST=100.0 value
simulation is saved in HighVisc_HighFlux.gif, this version commited.

The problems with the viscous simulation seem to come from the initial
adjustment. The next attempt set the initial density < 0.1 to the
densiest density so the source of dense water is in the initial
condition. 

23-06-2016 -----------------------------------------------------------

Profiling: mpirun -n 3 <same executable>
single processor time to 168: 15.1
2 processor time to 168: 9.7
3 processor time to 168: 7.4

Also, reducing vertical viscosity and horizontal viscosity makes the
solution move faster.
Run with FLUXCONST = 100.0, KV = 0.0005 saved in Plume1.gif
Run with FLUXCONST = 10.0,  KV = 0.005  saved in Plume2.gif and Plume2_long.gif

Still have trouble getting dense water out of the nudging region
without creating intermediate waters.
How do I fix this? Need to add artificially the flux and not use
surface forcing.

28-06-2016 -----------------------------------------------------------
Add a volume flux of the bottom density: This could be done at line
807 of file MOM_diabatic_driver.F90. Want to only do it where layer is
at deepest part of domain (i.e. not over topography). If want a flux V
(m3s-1), then want to add a dh = V/A*dt, where dt = time step, A =
area of deepest part of domain. Will this cause problems where
topography intercepts the bottom?

Correspondingly, we want to remove a volume flux V from the
surface. This is much trickier?? Should really be done according to
the SML/BBL structure.

Buoyancy fluxes: The volume flux V at the bottom adds a buoyancy flux
V*(densa-densb), and the volume flux at the top adds a buoyancy flux
V*(densa-denst) into the full domain, where densa = Total Mass/Total
Volume, densb = bottom density, denst = top density (that is removed
at V). Thus depending on the densities densb and denst, an additional
buoyancy flux at the surface may need to be added/subtracted, equal
to: Bflux_extra = -V*(2*densa - densb - denst)

Can these surface fluxes be added uniformly, and then adjustment would
occur through horizontal processes?

A scheme to do this: First reduce the top layer by as much as possible
(without going below an Angstrom). Keep track of how much removed,
then next layer etc. until volume flux removed. Then after the fact
add back in Bflux_extra as a uniform surface buoyancy flux on the next
time step? This Bflux_extra bit might be tricky to code....

Setting F: Replace code between lines 438 onwards.

don't have to worry about mixed layer or anything with kb (buffer
layers), kmb etc. 

29-06-2016 -----------------------------------------------------------

Adding to h at line 807 of MOM_diabatic_driver.F90 works
nicely. Example movie saved in AddFlux.gif

Overwritting buoyancy flux calculation between lines 517-736 also
successfully sets the buoyancy flux. This can be done easily within
the layers. Examples shown in Interior_converge.gif and
Bot_Converge.gif. Order of magnitude F that gives a nice change is 1.

For the Bot_Converge.gif, there is convergence of the buoyancy flux
into the layer one above the bottom, because F is set to zero in the
bottom layer. This results in net densification - effectively a flux
through the bottom boundary results. I think this is because of the
limiting on the change in thickness of the bottom layer, so need to
think about how to avoid this unphysical flux.

Buoyancy flux profile: Should be simple. Just start at the bottom with
the topography and set F upwards using h to get the height z to plug
into the exponential.

04-07-2016 -----------------------------------------------------------

Bottom volume flux written in nicely. 

Buoyancy flux profile added taking into account the min and max
limiters on F (note: This includes surface flux limiting to zero!!!)
and units. Added buoyancy flux output diagnostic. Example saved in
BF_zspace.gif

With Bottom Volume Flux: Added as BF_zspace_with_BVFlux.gif

Some consistent numbers:
eps_net = B0/bz/tanth*L
L = 40000
bz = g/rho0*(drho/dz)
   = g/rho0*((1/40)/(4000/40))
   = 2.4e-6
tanth = (1-0.3)*4000/(1-0.4)/800000
eps_net = 0.1e6
=> B0 = 3.5e-8

No! Current example can't drive any net transport up the slope because
area integrated F doesn't vary in the vertical! Need to add curvature
to the slope! This is next step.

05-07-2016 -----------------------------------------------------------

Changed forcing and units to be more consistent with a slow diffusive
process. Long time step of 2 hours seems to work. Constant slope saved
in Proper_Units.gif

Ability to have a curved slope added to topo configuration. Simple
demonstation of positive and negative curvature slopes done in
Curved_Slope_Downwelling and Upwelling.gif.

06-07-2016 -----------------------------------------------------------

Compiled successfully on raijin with a new raijin-intel.mk file (added
to mkmf/templates). Changed MOM_compile script to automatically pick
platform. 

08-07-2016 -----------------------------------------------------------

Added net water mass transformation to analysis notebook. +ve means
downward to dense water. In the Curved_Slope_Upwelling.gif the
upwelling only dominates once we leave the exponential decay of the
flat basin bottom (which drives downwelling). While in
Curved_Slope_Downwelling.gif, it's always downwelling.

Added a bottom flux to Upwelling and ran for a long time: Second-last
layer expands continously because of flat bottom in basin. Saved in
Curved_Slope_Upwelling_BotFlux_long.gif

09-07-2016 -----------------------------------------------------------

ERROR!!: Looks like there is a problem with mass conservation when the
SET_BFLUX option is on? Starts at day 60 and corresponds to a volume
flux of 0.08Sv between then and day 100. Where is this coming from?
Also leads to an actual flux over the 100 days of 0.17Sv as opposed to
0.1Sv. WTF? I suspect something funny happens when I hit maxF/minF
when layers disappear or something? Come back to this. Confirmed that
F(1) = F(nz) = 0, so physically there should be no net loss of
mass/volume from the system.
The time when volume non-conservation begins looks like the time when
the layer which is just above all the topography (as in, the lightest
layer that has no grid-points that start with zero thickness) gets to
zero thickness at it's deepest (most +ve y) point. Keeping the bottom
layer always thicker than zero (i.e. Bottom flux everywhere) doesn't
help (shouldn't). We get this problem in 1D (i.e. flat topography!). 

Turn horizontal thickness diffusion up to account for lateral
dynamics? 

Bug fix: When running parrallel the code in diabatic_driver is only
run over the segment in the current processor, so the calculation of
total area in the Bottom flux code was incorrect. Corrected by using
GV%areaT_global and the fractional area of the Bflux area.

Surface removal code written and works successfully in SERIAL ONLY!
Need to do something more complicated for a parallel application. 

Example with everything (Bot Flux, Top removal, BFLUX, Curv up) with
2Sv input saved as CurvUp_Bot_Top.gif, 
Same without BTop removal saved as CurvUp_Bot.gif
Same without Bot saved as CurvUp.gif

14-07-2016 -----------------------------------------------------------

Averaged buoyancy fluxes over layer. Made nice upwelling and
downwelling examples which do not have any regions where topography is
flat.


Volume non-conservation appears because of my bottom volume input,
even if it is removed at the surface. I think this is because I'm
holding the bottom layer above an Angstrom but the layers above
vanish. The non-conservation begins when the second lowest layer hits
an Angstrom. Maybe because of the order of picking maxF and my
artificial adjustments?

Chat with Nic:

- Floating point errors: compile with -fpe0 (intel compiler) to turn
on all floating point error checks (overflow, underflow, not a valid
representation of a floating point number errors). By default these
are all off for performance.
- mpp_sum(Vlay) -> Turns the local Vlay into a global Vlay by summing
  over all processors. May need to do this for Mex and Vex as well.
- Totalview: module load totalview
             mpirun --debug -n 1 ../../build/intel/ocean_only/debug/MOM6
  (run only on debug compile otherwise order will be screwed up)
  Ignore startup parameters....
  wait a while...
  then press Go....
  will come up with mpirun is a parallel job, do you want to stop
  job. press "no"
  will run, can stop any time. To stop at a particular place:
  View -> lookup function "diabatic"
  then put a break-point in (press boxed line number left) then run.
  will stop at break-point, can examine variables and even plot....
  

15-07-2016 -----------------------------------------------------------

Added exponential tapering decay towards basin to try to remove the
convergence in the 2nd bottom layer.

Added initial thick bottom layer option as well.

19-07-2016 -----------------------------------------------------------

Fixed volume/mass conservation error by moving Set_BFlux code block
above last iteration checks on layer thickness vanishing. Works
successfully. 

22-07-2016 -----------------------------------------------------------

With input topography and buoyancy flux parameters, can come up with
a semi-analytical solution that allows me to pick the bottom volume
flux input to give the correct range of densities throughout the
depth. This aids getting to a steady state enormously.

However, still seems to be some kind of problem with the top boundary
layer to get to a steady state? Top layer volume continues to
increase, some feedback with the mixing and low resolution??

This seems to occur only when the top layer is within an e-folding of
the topography (where something is happening on the
topography...). So need to do something about mixing on the top
boundary.

Increased order of magnitude the BFLUX and EPS to get solution as fast
as possible. Added thickness diffusion to stabilize somewhat (doesn't
work completely -> Becuase there is a CFL condition on KHTH that
limits it!!!)

This version git commited and analysis saved as steady_state1* with a
comparison steady_state1not with the opposite curvature that doesn't
get to a steady state.

